testStartCombatButton(): The method tests whether the start combat button appears correctly on the initGameScreen. This component is chosen because we want to use the start combat button to start combat. We tested the feature by matching the node on the initGameScreen. If the node is matched, it implies that the button appears correctly on the screen.

testEnemyAppearance(): The method tests whether the enemies start to appear after the start combat button is clicked. This component is chosen because we want to ensure that the enemies won’t appear until the player is ready for the game. We tested the feature by checking the visibility of the enemy. If the enemy is invisible before and becomes visible after the button is clicked, it implies the enemy appears as we expected.

testEasyEnemyDamage(): The method tests whether the damage of the enemy delt to the monument is the same as our expectation for the easy level. This component is chosen because we want the damage delt by the enemy to be different based on game difficulties. We tested the feature by checking whether the monument’s health decreased by a specific amount after a certain number of enemies reach it (in this case, it should decrease to 70% of the original monument’s health). If the change in the monument’s health is as expected, it implies that the feature is implemented correctly.

testMediumEnemyDamage(): The method tests whether the damage of the enemy delt to the monument is the same as our expectation for the medium level. This component is chosen because we want the damage delt by the enemy to be different based on game difficulties. The implementation tested by checking whether the monument’s health decreased by a specific amount after a certain number of enemies reach it. If the change in the monument’s health is as expected, it implies that the feature is implemented correctly.

testHardEnemyDamage(): The method tests whether the damage of the enemy delt to the monument is the same as our expectation for the hard level. This component is chosen because we want the damage delt by the enemy to be different based on game difficulties. The implementation tested by checking whether the monument’s health decreased by a specific amount after a certain number of enemies reach it. If the change in the monument’s health is as expected, it implies that the feature is implemented correctly.

testHellEnemyDamage(): The method tests whether the damage of the enemy delt to the monument is the same as our expectation for the hell level. This component is chosen because we want the damage delt by the enemy to be different based on game difficulties. The implementation of the feature is tested by checking whether the monument’s health decreased by a specific amount after a certain number of enemies reach it. If the change in the monument’s health is as expected, it implies that the feature is implemented correctly.

testLoseGame(): The method tests whether the player loses the game after the monument’s health goes to zero. This component is chosen because we want the player to be directed to the GameOverScreen with proper message of “You Lose” when losing the game. The implementation of the feature is tested by checking whether the “Game Over” label and the “You Lose” label appear on the GameOverScreen.

testRestartGame(): The method tests whether the restart button on the GameOverScreen directs the player to the WelcomeScreen. This component is chosen because we want to ensure that the player could restart the game after one game is over. We tested the feature by checking whether the “Welcome Screen” label appears after the restart button is clicked. If the label appears, it implies that the player successfully goes back to the WelcomeScreen after clicking the restart button.

testValueBeingResetAfterRestart(): The method tests whether the value is reset after the player restarts the game. This component is chosen because we want to ensure that the record of the last game won’t affect the new one. Otherwise, if the player lost the last game and the record of the monument’s health is kept, then the player would start with zero monument’s health in the new game, which is not what we want to see. We tested the feature by losing a game and restarting it to check whether the value of monument’s health is reset.

testExitGame(): The method tests whether the game ends after clicking the exit button on the GameOverScreen. This component is chosen because we want to allow the player to exit the game once it’s over. We tested the feature by clicking the exit button and checking whether the stage is not shown after it. If the stage is not shown, it implies that the game has ended correctly.

